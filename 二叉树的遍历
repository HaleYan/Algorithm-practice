#include <stdio.h>
#include <stdlib.h>

typedef char ElementType;
typedef struct TNode *Position;
typedef Position BinTree;
struct TNode{
    ElementType Data;
    BinTree Left;
    BinTree Right;
};

BinTree CreatBinTree(); /* 实现细节忽略 */
void InorderTraversal( BinTree BT );
void PreorderTraversal( BinTree BT );
void PostorderTraversal( BinTree BT );
void LevelorderTraversal( BinTree BT );

int main()
{
    BinTree BT = CreatBinTree();
    printf("Inorder:");    InorderTraversal(BT);    printf("\n");
    printf("Preorder:");   PreorderTraversal(BT);   printf("\n");
    printf("Postorder:");  PostorderTraversal(BT);  printf("\n");
    printf("Levelorder:"); LevelorderTraversal(BT); printf("\n");
    return 0;
}
void InorderTraversal( BinTree BT ){
	if(BT == NULL)
	return;
	
	InorderTraversal(BT -> Left);
	
	printf("%c",BT -> Data);
	
	InorderTraversal(BT -> Right);
} 
void PreorderTraversal( BinTree BT ){
	if(BT == NULL)
	return;
	
	printf("%c",BT -> Data);
	
	PreorderTraversal(BT->Left);
	
	PreorderTraversal(BT -> Right);
} 
void PostorderTraversal( BinTree BT ){
	if(BT == NULL)
	return;
	PostorderTraversal(BT -> Left);
	
	PostorderTraversal(BT -> Right);
	
	printf("%c",BT -> Data);
} 
void LevelorderTraversal( BinTree BT ){
 BinTree Queue[30];  
 BinTree p;
 int front=0, rear=0; 
 if(BT == NULL)
	return;
 else
 {
	p = BT;
  Queue[rear] = p; 
  rear = (rear+1) % 30;  
  while (front != rear)  
  {
    p = Queue[front];   
   printf(" %c",p -> Data);
   front = (front + 1) % 30;  
   if (p -> Left)     
   {
    Queue[rear] = p -> Left;
    rear = (rear + 1) % 30;
   }
   if (p -> Right)    
   {
      Queue[rear] = p -> Right;
      rear = (rear+1) % 30;
   }
  }
 }
}
